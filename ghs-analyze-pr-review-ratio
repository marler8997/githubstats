#!/usr/bin/env python3
import sys
import os
import argparse

import ghslib

class Actor:
    def __init__(self, login):
        self.login = login
        self.review_count = 0
        self.pr = {'OPEN':0,'MERGED':0,'CLOSED':0}

def get_or_init_actor(actors, login):
    if not (login in actors):
        actors[login] = Actor(login)
    return actors[login]

def align(val, max):
    return val + (" " * (max - len(val)))

def main():

    parser = argparse.ArgumentParser()
    parser.add_argument("repo")
    parser.add_argument("--no-cache", action="store_true")
    parser.add_argument("--server", default=ghslib.github_graphql_server)
    parser.add_argument("--csv", action="store_true")
    args = parser.parse_args()

    (owner, repo) = ghslib.parse_repo(args.repo)

    response = ghslib.get_graphql("""query {
      repository(owner:"%s", name:"%s") {
      pullRequests(%%s) { edges { cursor node {
        number
        title
        author{login}
        state
        mergedBy{login}
        reviews(last:100) { edges { cursor node {
          author{login}
        }}}
        }}}
      }
    }
    """ % (owner, repo), paginate = {"node":"repository.pullRequests"},
        no_cache = args.no_cache, server = args.server)

    pullRequests = response["repository"]["pullRequests"]["edges"]

    actors = {}

    for prNode in pullRequests:
        pr = prNode["node"]
        #print(pr)
        author_node = pr["author"]
        if not author_node:
            author_login = "<unknown>"
        else:
            author_login = author_node["login"]
        actor = get_or_init_actor(actors, author_login)

        state = pr["state"]
        actors[author_login].pr[state] += 1

        for reviewNode in pr["reviews"]["edges"]:
            review = reviewNode["node"]
            author = review["author"]
            if not author:
                review_actor = get_or_init_actor(actors, "???no_author???")
            else:
                review_actor = get_or_init_actor(actors, author["login"])
            review_actor.review_count += 1

    class Maxes:
        def __init__(self):
            self.login = 0
            self.review_count = 0
            self.pr_total = 0

    maxes = Maxes()

    for login, actor in actors.items():
        open = actor.pr["OPEN"]
        merged = actor.pr["MERGED"]
        closed = actor.pr["CLOSED"]
        pr_total = open + merged + closed
        actor.pr["total"] = pr_total
        maxes.login = max(maxes.login, len(actor.login))
        maxes.review_count = max(maxes.review_count, actor.review_count)
        maxes.pr_total = max(maxes.pr_total, pr_total)

    if args.csv:
        print("user,review/pr,reviews,open prs,merged prs,closed prs")
    else:
        print("-------------------------------------------------------------")

    align_review_count = len(str(maxes.review_count))
    align_pr_total = len(str(maxes.pr_total))

    for login, actor in actors.items():
        open = actor.pr["OPEN"]
        merged = actor.pr["MERGED"]
        closed = actor.pr["CLOSED"]
        pr_total = actor.pr["total"]
        if pr_total == 0:
            ratio = 0
        else:
            ratio = float(actor.review_count) / float(pr_total)
        if args.csv:
            print(login + "," + str(ratio) + "," + str(actor.review_count) + "," + str(open) +
                  "," + str(merged) + "," + str(closed))
        else:
            print(align(login, maxes.login)
                  + " | " + align(str(actor.review_count), align_review_count) + " reviews"
                  + " | {:.1f} review/pr".format(ratio)
                  + " | " + align(str(pr_total), align_pr_total)  + " pull request(s) (" + str(open) + " open, "
                  + str(merged) + " merged, " + str(closed) + " closed)")

main()
